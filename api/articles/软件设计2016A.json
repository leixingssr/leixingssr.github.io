{"title":"软件设计2016A","uid":"0f532b7b772da326c49235c97b678ef4","slug":"软件设计2016A","date":"2022-12-06T06:50:31.000Z","updated":"2022-12-07T13:15:09.701Z","comments":true,"path":"api/articles/软件设计2016A.json","keywords":null,"cover":"https://images2.alphacoders.com/696/696695.png","content":"<h1 id=\"软件设计A\"><a href=\"#软件设计A\" class=\"headerlink\" title=\"软件设计A\"></a>软件设计A</h1><h2 id=\"选择题\"><a href=\"#选择题\" class=\"headerlink\" title=\"选择题\"></a>选择题</h2><p>设计模式一般是用来解决什么问题的（  D  ）。<br>A．需求获取中业务领域知识获取         B．测试用例的设计<br>C．编码中如何组织代码                 <strong>D．同一问题的不同表象</strong></p>\n<p>开闭原则的含义是一个软件实体（  A  ）。<br><strong>A．应该对扩展开发，对修改关闭</strong>         B．对修改开放，对扩展关闭<br>C．在应用子类的地方可以使用父类代替   D．应该尽可能的使用大粒度的类实现</p>\n<p>以下不属于创建型设计模式的是（  B  ）。<br>A．工厂模式           \t\t\t\t  <strong>B．Proxy模式</strong><br>C．抽象工厂           \t\t\t\t  D．Builder模式</p>\n<p>在应用程序开发中那种设计模式可以用于分离出算法（  A  ）。<br><strong>A.策略模式</strong>       \t\t\t\t      B.中介模式<br>C.组合模式          \t\t\t\t  D.适配器模式</p>\n<p>下列属于结构型设计模式的是（  C  ）。<br>A．工厂模式               \t\t\t  B．中介模式<br><strong>C．组合模式</strong>              \t\t      D．命令模式</p>\n<p>不和陌生人说话（ B    ）是的通俗表示表述。<br>A．接口隔离原则            \t\t\t  <strong>B. 迪米特法则</strong><br>C. 开闭原则               \t          D. 依赖倒置原则</p>\n<p>下列属于面向对象基本原则的是（    ）<br>A. 继承\t\t\t\t\t\t\t B. 封装<br><strong>C. 里氏代换</strong>           \t\t \t D. 都不是</p>\n<p>要依赖于抽象，不要依赖具体。即针对接口编程，不要针对实现编程,是（    ）的表述。<br>A. 开-闭原则           \t\t\t B. 接口隔离原则<br>C. 里氏代换原则\t\t\t\t\t <strong>D. 依赖倒转原则</strong></p>\n<p>设计模式的两大主题是（    ）<br>A. 系统的维护与开发 \t\t\t B. 对象组合与类的继承<br>C. 系统架构与系统开发 \t\t\t <strong>D. 系统复用与系统扩展</strong></p>\n<p>以下对”开-闭”原则的一些描述错误的是? （    ）<br><strong>A. “开-闭”原则与”对可变性的封装原则”没有相似性.</strong><br>B. 找到一个系统的可变元素,将它封装起来,叫”开-闭”原则<br>C. 对修改关闭: 是其原则之一<br>D. 从抽象层导出一个或多个新的具体类可以改变系统的行为,是其原则之一</p>\n<p>以下意图那个是用来描述SINGLETON（单例模式）? （    ）<br>A. 将一个类的接口转换成客户希望的另外一个接口。该模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作<br><strong>B. 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</strong><br>C. 定义一系列算法，并把他们分装起来， 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。<br>D. 用一个中介对象来封装一系列的对象交互。</p>\n<p>以下意图那个是用来描述COMPOSITE（组合模式）? （    ）<br><strong>A. 为其他对象提供一种代理以控制对这个对象的访问。</strong><br>B. 运用共享技术有效地支持大量细粒度的对象。<br>C. 将对象组合成树形结构以表示 “部分-整体” 的层次结构。<br>D. 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<p>以下意图那个是用来描述 FACADE（外观模式）?(   )<br><strong>A. 为子系统中的一组接口提供一个一致的界面，本模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</strong><br>B. 定义一个用于创建对象的接口，让子类决定实例化哪一个类。<br>C. 保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>D. 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>\n<p>以下意图那个是用来描述 VISITOR（访问者模式）?(  )<br>A. 定义对象间的一种一对多的依赖关系, 当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。<br><strong>B. 表示一个作用于某对象结构中的各元素的操作。</strong><br>C. 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。<br>D. 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>\n<p>设计模式的原理? (  )<br>A. 面对实现编程 \t\t\t\t\tB. 面向对象编程<br><strong>C. 面向接口编程</strong>\t\t\t\t\t    D. 面向组合编程</p>\n<h2 id=\"填空题（每空1分，共20分）\"><a href=\"#填空题（每空1分，共20分）\" class=\"headerlink\" title=\"填空题（每空1分，共20分）\"></a>填空题（每空1分，共20分）</h2><p>工厂模式分为（_<strong>简单工厂</strong>_____）, （<strong>工厂模式</strong>）, （<strong>抽象工厂</strong>）三种类型。</p>\n<p>创立型模式的根本意图是要把（<strong>对象的创建</strong>）和（_<strong>使用分离</strong>_）的责任进行分离，从而降低系统的（**<em>耦合度</em>**）。</p>\n<p>MVC模型的基本工作原理是基于（<strong>观察者</strong>）模式，实现是基于（**命令_**）模式。</p>\n<p>设计模式的基本要素有：<strong>名字</strong>、<strong>意图</strong> 、<strong>问题</strong> 、<strong>方案</strong>、<strong>参与者与协作者</strong> 、<strong>实现</strong>、<strong>一般性结构</strong>。</p>\n<p>接口是可以在整个模型中反复使用的一组行为，是一个没有（<strong>属性</strong>）而只有（_<strong>方法</strong>）的类。</p>\n<p>软件体系结构是指一个系统的有目的的设计和规划，这个设计规划既不描述（<strong>活动</strong>），也不描述（__<strong>系统怎么开发</strong>），它只描述系统的（_<strong>组成元素</strong>）及其相互的交互协作。</p>\n<h2 id=\"简答题（每小题6分，共30分）\"><a href=\"#简答题（每小题6分，共30分）\" class=\"headerlink\" title=\"简答题（每小题6分，共30分）\"></a>简答题（每小题6分，共30分）</h2><p>什么是设计模式？设计模式目标是什么？<br><strong>设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</strong></p>\n<p>设计模式中一般都遵循的原则有什么？<br><strong>使用设计模式是为了可重用代码、让代码更容易被他人理解，保证代码可靠性。</strong></p>\n<p>在MVC模型中M、V、C分别指什么？简述它们之间的关系？<br><strong>M: 模型(Model), V:视图(View) C:控制Controller)。</strong><br><strong>MVC模式的目的就是实现Web系统的职能分工。 Model层实现系统中的业务逻辑，通常可以用JavaBean或EJB来实现。 View层用于与用户的交互，通常用JSP来实现。 Controller层是Model与View之间沟通的桥梁，它可以分派用户的请求并选择恰当的视图以用于显示，同时它也可以解释用户的输入并将它们映射为模型层可执行的操作。</strong></p>\n<p>面向对象系统中功能复用的两种最常用技术是什么？<br><strong>类继承和对象组合</strong><br><strong>类继承允许你根据其他类的实现来定义一个类的实现。父类的内部细节对子类可见。类继承是在编译时刻静态定义的，且可直接使用，类继承可以较方便地改变被复用的实现。对象组合是类继承之外的另一种复用选择。新的更复杂的功能可以通过组装或组合对象来获得。对象组合要求被组合的对象具有良好定义的接口。</strong></p>\n<p>只根据抽象类中定义的接口来操纵对象有什么好处？<br><strong>客户无须知道他们使用对象的特定类型，只须对象有客户所期望的接口。</strong>**</p>\n<p><strong>客户无须知道他们使用的对象是用什么类来实现的，他们只须知道定义接口的抽象类</strong>**</p>\n<h2 id=\"应用题（第一小题8分，第二小题12分，共20分）\"><a href=\"#应用题（第一小题8分，第二小题12分，共20分）\" class=\"headerlink\" title=\"应用题（第一小题8分，第二小题12分，共20分）\"></a>应用题（第一小题8分，第二小题12分，共20分）</h2><p>画出工厂方法模式的结构图。什么情况下适合使用工厂方发模式？（8分）</p>\n<p>请用命令设计模式实现下图所示系统（12分）</p>\n","text":"软件设计A选择题设计模式一般是用来解决什么问题的（ D ）。A．需求获取中业务领域知识获取 B．测试用例的设计C．编码中如何组织代码 D．同一问题的不同表象 开闭原则的含义是一个软件实体（ A ）。A．应该对扩展开发，对修改关闭 B．对修改开放，对扩展关闭C．在应用子类的地方可以...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"考试","slug":"考试","count":4,"path":"api/categories/考试.json"}],"tags":[{"name":"考试","slug":"考试","count":4,"path":"api/tags/考试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1A\"><span class=\"toc-text\">软件设计A</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E9%A2%98\"><span class=\"toc-text\">选择题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A1%AB%E7%A9%BA%E9%A2%98%EF%BC%88%E6%AF%8F%E7%A9%BA1%E5%88%86%EF%BC%8C%E5%85%B120%E5%88%86%EF%BC%89\"><span class=\"toc-text\">填空题（每空1分，共20分）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E7%AD%94%E9%A2%98%EF%BC%88%E6%AF%8F%E5%B0%8F%E9%A2%986%E5%88%86%EF%BC%8C%E5%85%B130%E5%88%86%EF%BC%89\"><span class=\"toc-text\">简答题（每小题6分，共30分）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E9%A2%98%EF%BC%88%E7%AC%AC%E4%B8%80%E5%B0%8F%E9%A2%988%E5%88%86%EF%BC%8C%E7%AC%AC%E4%BA%8C%E5%B0%8F%E9%A2%9812%E5%88%86%EF%BC%8C%E5%85%B120%E5%88%86%EF%BC%89\"><span class=\"toc-text\">应用题（第一小题8分，第二小题12分，共20分）</span></a></li></ol></li></ol>","author":{"name":"Leixng","slug":"blog-author","avatar":"/img/003.png","link":"/","description":"清风徐来","socials":{"github":"https://github.com/leixingssr?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/177137946?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/leixingsss"},"Email":{"icon":"/img/svg/QQMail.svg","link":"https://mail.qq.com/cgi-bin/frame_html?sid=E8RhG3WmM8OPiglq&r=af46ab161c61f3640e812141ff04c53c&lang=zh"}}}},"mapped":true,"prev_post":{"title":"软件设计2016B","uid":"1e4363102957705e71b03727a248bf78","slug":"软件设计2016B","date":"2022-12-06T07:01:51.000Z","updated":"2022-12-07T13:15:49.338Z","comments":true,"path":"api/articles/软件设计2016B.json","keywords":null,"cover":"https://images7.alphacoders.com/112/1123196.png","text":"软件设计B选择题（每小题2分，共30分）对于依赖倒转的表述错误的是（ D ）A. 依赖于抽象而不依赖于具体，也就是针对接口编程。B. 依赖倒转的接口并非语法意义上的接口，而是，一个类对其他对象进行调用时，所知道的方法集合。C. 从选项B的角度论述，一个对象可以有多个接口。D. 此...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"考试","slug":"考试","count":4,"path":"api/categories/考试.json"}],"tags":[{"name":"考试","slug":"考试","count":4,"path":"api/tags/考试.json"}],"author":{"name":"Leixng","slug":"blog-author","avatar":"/img/003.png","link":"/","description":"清风徐来","socials":{"github":"https://github.com/leixingssr?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/177137946?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/leixingsss"},"Email":{"icon":"/img/svg/QQMail.svg","link":"https://mail.qq.com/cgi-bin/frame_html?sid=E8RhG3WmM8OPiglq&r=af46ab161c61f3640e812141ff04c53c&lang=zh"}}}}},"next_post":{"title":"MybatisPlus","uid":"3244bafd4b77bc1eda4a2f2a047e0e05","slug":"MybatisPlus","date":"2022-10-15T03:10:00.000Z","updated":"2022-11-12T03:10:12.135Z","comments":true,"path":"api/articles/MybatisPlus.json","keywords":null,"cover":"https://rare-gallery.com/thumbnail/461271-women-pointed-ears-WLOP-elves-dress-Ghostblade.jpg","text":"MyBatisPlus今日目标 基于MyBatisPlus完成标准Dao的增删改查功能 掌握MyBatisPlus中的分页及条件查询构建 掌握主键ID的生成策略 了解MyBatisPlus的代码生成器 1，MyBatisPlus入门案例与简...","link":"","photos":[],"count_time":{"symbolsCount":"53k","symbolsTime":"48 mins."},"categories":[{"name":"java","slug":"java","count":5,"path":"api/categories/java.json"},{"name":"框架","slug":"java/框架","count":5,"path":"api/categories/java/框架.json"}],"tags":[{"name":"java","slug":"java","count":5,"path":"api/tags/java.json"},{"name":"框架","slug":"框架","count":5,"path":"api/tags/框架.json"}],"author":{"name":"Leixng","slug":"blog-author","avatar":"/img/003.png","link":"/","description":"清风徐来","socials":{"github":"https://github.com/leixingssr?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/177137946?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/leixingsss"},"Email":{"icon":"/img/svg/QQMail.svg","link":"https://mail.qq.com/cgi-bin/frame_html?sid=E8RhG3WmM8OPiglq&r=af46ab161c61f3640e812141ff04c53c&lang=zh"}}}},"feature":false}}